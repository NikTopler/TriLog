generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Athletes {
  ID             Int              @id @default(autoincrement())
  firstName      String?          @db.VarChar(50)
  lastName       String?          @db.VarChar(50)
  age            Int?
  countryID      Int?
  stateID        Int?
  cityID         Int?
  Cities         Cities?          @relation(fields: [cityID], references: [ID], onDelete: Cascade, map: "athlete_city_FK")
  Countries      Countries?       @relation(fields: [countryID], references: [ID], onDelete: Cascade, map: "athlete_country_FK")
  States         States?          @relation(fields: [stateID], references: [ID], onDelete: Cascade, map: "athlete_state_FK")
  Participations Participations[]

  @@index([cityID], map: "athlete_city_FK")
  @@index([countryID], map: "athlete_country_FK")
  @@index([stateID], map: "athlete_state_FK")
}

model Cities {
  ID         Int          @id @default(autoincrement())
  name       String?      @db.VarChar(40)
  countryID  Int?
  stateID    Int?
  Athletes   Athletes[]
  Countries  Countries?   @relation(fields: [countryID], references: [ID], onDelete: Cascade, map: "city_country_FK")
  States     States?      @relation(fields: [stateID], references: [ID], onDelete: Cascade, map: "city_state_FK")
  Triathlons Triathlons[]

  @@index([countryID], map: "city_country_FK")
  @@index([stateID], map: "city_state_FK")
}

model Countries {
  ID            Int          @id @default(autoincrement())
  name          String?      @db.VarChar(150)
  fullName      String?      @db.VarChar(200)
  alpha2        String?      @db.VarChar(2)
  alpha3        String?      @db.VarChar(3)
  continentCode String?      @db.VarChar(2)
  number        String?      @db.VarChar(3)
  Athletes      Athletes[]
  Cities        Cities[]
  States        States[]
  Triathlons    Triathlons[]
}

model Organizations {
  ID             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  acronym        String           @db.VarChar(5)
  TriathlonTypes TriathlonTypes[]
}

model Participations {
  ID                      Int                  @id @default(autoincrement())
  swimTimeSeconds         Int?
  bikeTimeSeconds         Int?
  runTimeSeconds          Int?
  timeSeconds             Int?
  startNumber             Int?
  firstTransitionSeconds  Int?
  secondTransitionSeconds Int?
  genderRank              Int?
  divisionRank            Int?
  rank                    Int?
  points                  Int?
  DNS                     Boolean?
  DNF                     Boolean?
  athleteID               Int
  triathlonID             Int
  triathlonCategoryID     Int?
  Athletes                Athletes             @relation(fields: [athleteID], references: [ID], onDelete: Cascade, map: "participation_athlete_FK")
  TriathlonCategories     TriathlonCategories? @relation(fields: [triathlonCategoryID], references: [ID], onDelete: Cascade, map: "participation_triathlonCategory_FK")
  Triathlons              Triathlons           @relation(fields: [triathlonID], references: [ID], onDelete: Cascade, map: "participation_triathlon_FK")

  @@index([athleteID], map: "participation_athlete_FK")
  @@index([triathlonCategoryID], map: "participation_triathlonCategory_FK")
  @@index([triathlonID], map: "participation_triathlon_FK")
}

model States {
  ID         Int          @id @default(autoincrement())
  name       String?      @db.VarChar(40)
  acronym    String?      @db.VarChar(3)
  countryID  Int
  Athletes   Athletes[]
  Cities     Cities[]
  Countries  Countries    @relation(fields: [countryID], references: [ID], onDelete: Cascade, map: "state_country_FK")
  Triathlons Triathlons[]

  @@index([countryID], map: "state_country_FK")
}

model TriathlonCategories {
  ID             Int                         @id @default(autoincrement())
  name           String                      @db.VarChar(15)
  acronym        String                      @db.VarChar(3)
  gender         TriathlonCategories_gender?
  Participations Participations[]
}

model TriathlonTypes {
  ID             Int           @id @default(autoincrement())
  name           String        @db.VarChar(100)
  swimKm         Float
  bikeKm         Float
  runKm          Float
  organizationID Int
  Organizations  Organizations @relation(fields: [organizationID], references: [ID], onDelete: Cascade, map: "triathlonType_oranization_FK")
  Triathlons     Triathlons[]

  @@index([organizationID], map: "triathlonType_oranization_FK")
}

model Triathlons {
  ID                  Int              @id @default(autoincrement())
  year                Int
  countryID           Int?
  stateID             Int?
  cityID              Int?
  isWorldChampionship Boolean?
  triathlonTypeID     Int
  Participations      Participations[]
  Cities              Cities?          @relation(fields: [cityID], references: [ID], onDelete: Cascade, map: "triathlon_city_FK")
  Countries           Countries?       @relation(fields: [countryID], references: [ID], onDelete: Cascade, map: "triathlon_country_FK")
  States              States?          @relation(fields: [stateID], references: [ID], onDelete: Cascade, map: "triathlon_state_FK")
  TriathlonTypes      TriathlonTypes   @relation(fields: [triathlonTypeID], references: [ID], onDelete: Cascade, map: "triathlon_triathlonType_FK")

  @@index([cityID], map: "triathlon_city_FK")
  @@index([countryID], map: "triathlon_country_FK")
  @@index([stateID], map: "triathlon_state_FK")
  @@index([triathlonTypeID], map: "triathlon_triathlonType_FK")
}

model Users {
  id                         Int        @id @default(autoincrement())
  email                      String     @unique(map: "email") @db.VarChar(255)
  profileImageUrl            String?    @db.VarChar(255)
  refreshToken               String?    @db.VarChar(255)
  verificationToken          String?    @db.VarChar(255)
  verificationTokenExpiresAt DateTime?  @db.DateTime(0)
  verificationCode           String?    @db.VarChar(5)
  verificationCodeExpiresAt  DateTime?  @db.DateTime(0)
  isVerified                 Boolean    @default(false)
  role                       Users_role @default(user)
  createdAt                  DateTime   @default(now()) @db.Timestamp(0)
  updatedAt                  DateTime   @default(now()) @db.Timestamp(0)
  facebookID                 String?    @unique(map: "facebookID") @db.VarChar(255)
  githubID                   String?    @unique(map: "githubID") @db.VarChar(255)
  googleID                   String?    @unique(map: "googleID") @db.VarChar(255)
}

enum TriathlonCategories_gender {
  male
  female
}

enum Users_role {
  user
  admin
}
